\documentclass[xcolor=dvipsnames]{beamer}

\usecolortheme[named=Plum]{structure}

\setbeamertemplate{items}[circle]
\setbeamertemplate{navigation symbols}{}

\usetheme{Boadilla}

\usepackage{graphics}
\usepackage{hyperref}
\usepackage{fancybox}

\usepackage[absolute,overlay]{textpos}
\newenvironment{myfootnote}[2]
{\begin{textblock*}{\textwidth}(#1,#2)\footnotesize\textcolor{Black}\bgroup}
{\egroup\end{textblock*}}

\AtBeginSection[]
{
 \begin{frame}
 \frametitle{Overview}
 \tableofcontents[currentsection]
 \end{frame}
}


\title{Structured Logging in Go}
% \subtitle{An Introduction to Structured Logging}
\author{Ashim Ghosh}
\date[]{February 10, 2018}

\begin{document}

%% FRAME: Title page

\begin{frame}[plain]
  \titlepage
\end{frame}

%% FRAME: About me

\begin{frame}{About me}
  \begin{itemize}
    \item Develop performant web services using C at PubMatic
    \item Amature Go developer
    \item Currently, developing my first, production-grade web service using Go
  \end{itemize}
\end{frame}

%% FRAME: TOC

\begin{frame}{Overview}
  \tableofcontents{}
\end{frame}

%% FRAME: Scenario

\begin{frame}{Scenario: Go Proxy (GoPro)}
  \begin{center}
  \includegraphics[width=.9\textwidth]{scenario}
  \end{center}
  \medskip

  \begin{itemize}
    \item Accept requests from \structure{\emph{user agent}}
    \item Proxy request to the \structure{\emph{origin server}}
    \item Proxy response from the origin server to the user agent
  \end{itemize}
  % \pause
  % \bigskip

  % Why this scenario?
  % \begin{itemize}
  %   \item A good model for the Ad Server
  %   \item Easy --- won't get in the way
  % \end{itemize}
\end{frame}


%% SECTION: Print Statements

\section{Print Statements}

%% FRAME: Prints

\begin{frame}{Prints}
  \begin{itemize}
    \item \structure{Approach}: Add plain print statements
   \item \structure{Documentation}: [Online.]
     \href{https://golang.org/pkg/fmt/}{golang.org/pkg/fmt/}
   \item \structure{Repository}: Built into Go
   \item \structure{Demo}: Branch
     \structure{\href{https://github.com/Sarkutz/talk-go-logging/tree/print}{print}}
  \end{itemize}
  \pause
  \bigskip

  \begin{itemize}
    \item \structure{Merits}:
      \ovalbox{Simplicity}
    \item \structure{Demerits}: 
      \ovalbox{Level of abstraction}
      \ovalbox{Ease of parsing}
      \ovalbox{Log design}
      \ovalbox{Avoid missing log details}
      \ovalbox{Production readiness}
  \end{itemize}
\end{frame}


%% SECTION: Default Logger

\section{Default Logger}

%% FRAME: Default Logger

\begin{frame}{Default Logger}
  \begin{itemize}
    \item \structure{Approach}: Use log package; simple, sensible, basic
    \item Fatal log-level considered bad?
    \item \structure{Documentation}: [Online.]
      \href{https://golang.org/pkg/log/}{golang.org/pkg/log/}
    \item \structure{Repository}: Built into Go
    \item \structure{Demo}: Branch
      \structure{\href{https://github.com/Sarkutz/talk-go-logging/tree/pkg-log}{pkg-log}}
  \end{itemize}
  \pause
  \bigskip

  \begin{itemize}
    \item \structure{Merits}:
      \ovalbox{Simplicity}
      \ovalbox{Production readiness}
    \item \structure{Demerits}: 
      \ovalbox{Level of abstraction} (effectively only two levels)
      \ovalbox{Ease of parsing}
      \ovalbox{Log design}
    \item \ovalbox{Avoid missing log details} (support for adding some details
      to each log)
  \end{itemize}
\end{frame}


%% SECTION: Levelled Logging

\section{Levelled Logging}

%% FRAME: Levelled Logging

\begin{frame}[fragile]{Levelled Logging}
  \begin{itemize}
    \item \structure{Purpose}: Ameliorate problem of level of abstraction
    \item \structure{Approach}: Define levels of severity; add logs at appropriate level
      (after due consideration)
    \item \structure{Common Functions}: 
      \begin{itemize}
        \item \verb|{Debug, Info, Warn, Error, Fatal, Panic} X {, f, ln}|
        \item \verb|func SetLevel(int)|
      \end{itemize}
    \item Too many log levels considered bad?

    \item glog package
    \item \structure{Documentation}: [Online.]
      \href{https://godoc.org/github.com/golang/glog}{godoc.org/github.com/golang/glog}
    \item \structure{Repository}: [Online.]
      \href{https://github.com/golang/glog}{github.com/golang/glog}
  \end{itemize}

  \pause
  \bigskip

  \begin{itemize}
    \item \structure{Merits}:
      \ovalbox{Level of abstraction}
      \ovalbox{Production readiness}
    \item \structure{Demerits}: 
      \ovalbox{Ease of parsing}
      \ovalbox{Log design}
      \ovalbox{Avoid missing log details}
      \ovalbox{Simplicity}
  \end{itemize}
\end{frame}


%% SECTION: Structured Logging

\section{Structured Logging}

%% FRAME: Structured Logging

\begin{frame}{Structured Logging}
  \begin{center}
    \structure{\textbf{structure}} {\textit{\small(noun)}}: a complex entity constructed of many parts.
  \end{center}
  \bigskip

  \begin{itemize}
    \item Thinking of logs as a structure; designing this structure and it's
      parts
    \item Machine readable structure.
  \end{itemize}
\end{frame}

%% FRAME: Structured Logging: Example

\begin{frame}{Example: Unstructured Log Line}
  \begin{block}{Sample log}
    \texttt{\scriptsize req = \&\{Method:GET URL:/ Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[User-Agent:[curl/7.47.0] Accept:[*/*] X-Purl:[https://www.youtube.com/]] Body:\{\} GetBody:$\langle$nil$\rangle$ ContentLength:0 TransferEncoding:[] Close:false Host:localhost:8080 Form:map[] PostForm:map[] MultipartForm:$\langle$nil$\rangle$ Trailer:map[] RemoteAddr:127.0.0.1:46312 RequestURI:/ TLS:$\langle$nil$\rangle$ Cancel:$\langle$nil$\rangle$ Response:$\langle$nil$\rangle$ ctx:0xc42005e340\}}
  \end{block}
  \medskip

  \structure{Considerations-}
  \begin{itemize}
    \item Not machine readable?
    \item Not human readable?
    \item Who consumes logs?
    \item Too much detail?  Yet, missing fields?
    \item \structure{Destroying the structure of a structure}
  \end{itemize}
\end{frame}

%% FRAME: Design Structured Log Line

\begin{frame}[fragile]{Design Structured Log Line: Universal fields}
  \begin{itemize}
    \item Some field make sense for all applications
  \end{itemize}
  \bigskip

  \begin{block}{Structured Log Line}
    \footnotesize
    \begin{verbatim}
    {
      "level": "debug",
      "pkg": "main",
      "reqid": 1518232390,
      "time": "2018-02-10T08:43:10+05:30",
      "msg": "Received request from User Agent"
    }
    \end{verbatim}
  \end{block}
\end{frame}

%% FRAME: Design Structured Log Line: Global Fields

\begin{frame}[fragile]{Design Structured Log Line: Global Fields}
  \begin{itemize}
    \item Application-specific fields
    \item Should be added to each log line
  \end{itemize}
  \bigskip

  \begin{block}{Structured Log Line}
    \footnotesize
    \begin{verbatim}
    {
      [...]

      "peer": "ua",
      "method": "GET",
      "url": "https://www.youtube.com/",
    }
    \end{verbatim}
  \end{block}
\end{frame}

%% FRAME: Design Structured Log Line: Analysis-specific Fields

\begin{frame}[fragile]{Design Structured Log Line: Analysis-specific Fields}
  \begin{itemize}
    \item Field required to answer questions specific to an analysis
    \item Example Analysis: Does the origin server upgrade to HTTP/2 when we
      make a HTTPS request?
    \item<2> Challenge: How to ensure that we include sufficient fields to handle
      unforeseen, future fields?
  \end{itemize}

  \begin{block}{Structured Log Line}
    \footnotesize
    \begin{verbatim}
    {
      [...]

      "httpver": "HTTP/1.1",
      "scheme": "https"
    }
    \end{verbatim}
  \end{block}
\end{frame}

% FRAME: Example Structured versus Unstructured Log Line

\begin{frame}{Example Structured versus Unstructured Log Line}
  \begin{block}{Unstructured Log Line}
    \texttt{\scriptsize req = \&\{Method:GET URL:/ Proto:HTTP/1.1 ProtoMajor:1 ProtoMinor:1 Header:map[User-Agent:[curl/7.47.0] Accept:[*/*] X-Purl:[https://www.youtube.com/]] Body:\{\} GetBody:$\langle$nil$\rangle$ ContentLength:0 TransferEncoding:[] Close:false Host:localhost:8080 Form:map[] PostForm:map[] MultipartForm:$\langle$nil$\rangle$ Trailer:map[] RemoteAddr:127.0.0.1:46312 RequestURI:/ TLS:$\langle$nil$\rangle$ Cancel:$\langle$nil$\rangle$ Response:$\langle$nil$\rangle$ ctx:0xc42005e340\}}
  \end{block}
  \bigskip

  \begin{block}{Structured Log Line}
    \texttt{\footnotesize \{"httpver":"HTTP/1.1", "level":"debug", "method":"GET", "msg":"Received request from User Agent", "peer":"ua", "pkg":"main", "reqid":1518232390, "scheme":"https", "time":"2018-02-10T08:43:10+05:30", "url":"https://www.youtube.com/"\}}
  \end{block}
\end{frame}

%% SECTION: Logrus Package

\section{Logrus Package}

%% FRAME: Logrus: Overview

\begin{frame}{Logrus: Overview}
  \begin{itemize}
    \item \structure{Approach}: Design ``parts/fields'' of each log; use Logrus package
    \item \structure{Documentation}: [Online.]
      \href{https://godoc.org/github.com/sirupsen/logrus}{godoc.org/github.com/sirupsen/logrus}
    \item \structure{Repository} (and tutorial): [Online.]
      \href{https://github.com/sirupsen/logrus}{github.com/sirupsen/logrus}
    \item \structure{Demo}: Branch
      \structure{\href{https://github.com/Sarkutz/talk-go-logging/tree/logrus}{logrus}}
  \end{itemize}
\end{frame}

%% FRAME: Logrus: Code and Demo

\begin{frame}{Logrus: Code and Demo}
  Questions that logs can answer-
  \begin{itemize}[<+->]
    \item Are there any errors?
      \structure{\{simple\}}
    \item What HTTP status codes are returned by the origin server?
      \structure{\{doable\}}
    \item Does origin server upgrade to HTTP/2 for HTTPS?
      \structure{\{analysis specific\}}
    \item Can I replay what happened in a request?
      \structure{\{deep analysis\}}
    \item Can I manage Time Series Data?
      \structure{\{deep analysis\}}
    \item Can I find out the most frequent requests from user agent?
      \structure{\{business analysis\}}.
  \end{itemize}
\end{frame}

%% FRAME: Logrus: Merits and Demerits

\begin{frame}{Logrus: Merits and Demerits}
  \begin{itemize}
    \item \structure{Merits}:
      \ovalbox{Level of abstraction}
      \ovalbox{Ease of parsing}
      \ovalbox{Good log design}
      \ovalbox{Avoid missing log details}
      \ovalbox{Production readiness}
    \item \structure{Demerits}: 
      \ovalbox{Simplicity}?
      \ovalbox{Ugly}?
  \end{itemize}
\end{frame}


%% FRAME: Conclusion

\begin{frame}{Conclusion}
  \begin{itemize}
    \item Design logs as if they were composed of several fields.
    \item The logrus package provides structured, levelled and pluggable
      logging in Go.
    \item This presentation and GoPro code is available online at
      \structure{\href{https://github.com/sarkutz/talk-go-logging}{github.com/sarkutz/talk-go-logging}}
  \end{itemize}
\end{frame}

%% FRAME: Thank You

{
  \setbeamertemplate{background canvas}{\includegraphics[width=\paperwidth,height=\paperheight]{thank_you.png}}

  \begin{frame}[plain]
  \end{frame}
}

\end{document}
